{"ast":null,"code":"const {\n  Router\n} = require('express');\nconst User = require('../models/user');\nconst checkCookies = require('../middlewares/auth');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst router = Router();\n\n// Middleware to check cookies and decode token\nrouter.use(checkCookies('token'));\n\n// Get user profile - Protected route\nrouter.get('/profile', async (req, res) => {\n  if (!req.user) {\n    return res.status(401).json({\n      error: 'Unauthorized. Please log in.'\n    });\n  }\n  try {\n    const user = req.user; // User should be set by the auth middleware after verifying token\n    res.status(200).json({\n      user: {\n        id: user._id,\n        name: user.Name,\n        email: user.Email\n      }\n    }); // Return user info\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    res.status(500).json({\n      error: 'Failed to load profile'\n    });\n  }\n});\n\n// Login route\nrouter.post('/login', async (req, res) => {\n  const {\n    Email,\n    Password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      Email\n    });\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Compare the provided password with the stored hashed password\n    const isMatch = await bcrypt.compare(Password, user.Password);\n    if (!isMatch) {\n      throw new Error('Incorrect Password');\n    }\n    const token = jwt.sign({\n      id: user._id,\n      Name: user.Name,\n      Email: user.Email,\n      role: user.roles\n    }, 'A@ka$h', {\n      expiresIn: '1h'\n    });\n    res.cookie('token', token, {\n      httpOnly: true,\n      maxAge: 3600000\n    }).status(200).json({\n      token,\n      user: {\n        name: user.Name,\n        email: user.Email\n      }\n    });\n  } catch (error) {\n    console.error('Error during login:', error.message);\n    res.status(401).json({\n      error: error.message\n    });\n  }\n});\n\n// Signup route\nrouter.post('/signup', async (req, res) => {\n  const {\n    Name,\n    Email,\n    Password\n  } = req.body;\n  if (!Name || !Email || !Password) {\n    return res.status(400).json({\n      error: 'All fields are required'\n    });\n  }\n  try {\n    // Check if the user already exists\n    const existingUser = await User.findOne({\n      Email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        error: 'User already exists'\n      });\n    }\n    const hashedPassword = await bcrypt.hash(Password, 10); // Hash the password\n    const newUser = await User.create({\n      Name,\n      Email,\n      Password: hashedPassword\n    });\n    const token = jwt.sign({\n      id: newUser._id,\n      Name: newUser.Name,\n      Email: newUser.Email\n    }, process.env.JWT_SECRET || 'your-secret-key', {\n      expiresIn: '1h'\n    });\n    res.cookie('token', token, {\n      httpOnly: true,\n      maxAge: 3600000\n    }).status(201).json({\n      message: 'Signup successful.',\n      user: {\n        id: newUser._id,\n        name: newUser.Name,\n        email: newUser.Email\n      }\n    });\n  } catch (error) {\n    console.error('Error during signup:', error.message);\n    res.status(500).json({\n      error: 'Signup failed. Please try again.'\n    });\n  }\n});\n\n// Logout route\nrouter.get('/logout', (req, res) => {\n  res.clearCookie('token').status(200).json({\n    message: 'Logged out successfully.'\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["Router","require","User","checkCookies","bcrypt","jwt","router","use","get","req","res","user","status","json","error","id","_id","name","Name","email","Email","console","post","Password","body","findOne","Error","isMatch","compare","token","sign","role","roles","expiresIn","cookie","httpOnly","maxAge","message","existingUser","hashedPassword","hash","newUser","create","process","env","JWT_SECRET","clearCookie","module","exports"],"sources":["C:/Users/Aakash/OneDrive/Documents/MyApp/frontend/src/components/Login.js"],"sourcesContent":["const { Router } = require('express');\r\nconst User = require('../models/user');\r\nconst checkCookies = require('../middlewares/auth');\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst router = Router();\r\n\r\n// Middleware to check cookies and decode token\r\nrouter.use(checkCookies('token'));\r\n\r\n// Get user profile - Protected route\r\nrouter.get('/profile', async (req, res) => {\r\n    if (!req.user) {\r\n        return res.status(401).json({ error: 'Unauthorized. Please log in.' });\r\n    }\r\n\r\n    try {\r\n        const user = req.user; // User should be set by the auth middleware after verifying token\r\n        res.status(200).json({ user: { id: user._id, name: user.Name, email: user.Email } }); // Return user info\r\n    } catch (error) {\r\n        console.error('Error fetching user profile:', error);\r\n        res.status(500).json({ error: 'Failed to load profile' });\r\n    }\r\n});\r\n\r\n// Login route\r\nrouter.post('/login', async (req, res) => {\r\n    const { Email, Password } = req.body;\r\n\r\n    try {\r\n        const user = await User.findOne({ Email });\r\n        if (!user) {\r\n            throw new Error('User not found');\r\n        }\r\n\r\n        // Compare the provided password with the stored hashed password\r\n        const isMatch = await bcrypt.compare(Password, user.Password);\r\n\r\n        if (!isMatch) {\r\n            throw new Error('Incorrect Password');\r\n        }\r\n\r\n        const token = jwt.sign(\r\n            { id: user._id, Name: user.Name, Email: user.Email, role: user.roles },\r\n            'A@ka$h',\r\n            { expiresIn: '1h' }\r\n        );\r\n\r\n        res.cookie('token', token, { httpOnly: true, maxAge: 3600000 }).status(200).json({\r\n            token,\r\n            user: { name: user.Name, email: user.Email },\r\n        });\r\n    } catch (error) {\r\n        console.error('Error during login:', error.message);\r\n        res.status(401).json({ error: error.message });\r\n    }\r\n});\r\n\r\n// Signup route\r\nrouter.post('/signup', async (req, res) => {\r\n    const { Name, Email, Password } = req.body;\r\n\r\n    if (!Name || !Email || !Password) {\r\n        return res.status(400).json({ error: 'All fields are required' });\r\n    }\r\n\r\n    try {\r\n        // Check if the user already exists\r\n        const existingUser = await User.findOne({ Email });\r\n        if (existingUser) {\r\n            return res.status(400).json({ error: 'User already exists' });\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(Password, 10); // Hash the password\r\n        const newUser = await User.create({ Name, Email, Password: hashedPassword });\r\n\r\n        const token = jwt.sign(\r\n            { id: newUser._id, Name: newUser.Name, Email: newUser.Email },\r\n            process.env.JWT_SECRET || 'your-secret-key',\r\n            { expiresIn: '1h' }\r\n        );\r\n\r\n        res.cookie('token', token, { httpOnly: true, maxAge: 3600000 }).status(201).json({\r\n            message: 'Signup successful.',\r\n            user: { id: newUser._id, name: newUser.Name, email: newUser.Email },\r\n        });\r\n    } catch (error) {\r\n        console.error('Error during signup:', error.message);\r\n        res.status(500).json({ error: 'Signup failed. Please try again.' });\r\n    }\r\n});\r\n\r\n// Logout route\r\nrouter.get('/logout', (req, res) => {\r\n    res.clearCookie('token').status(200).json({ message: 'Logged out successfully.' });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}